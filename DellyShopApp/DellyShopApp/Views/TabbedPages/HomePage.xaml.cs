using Acr.UserDialogs;using DellyShopApp.CustomControl;using DellyShopApp.DbModels;using DellyShopApp.Enums;using DellyShopApp.Languages;using DellyShopApp.Models;using DellyShopApp.Services;using DellyShopApp.Views.CustomView;using DellyShopApp.Views.Pages;using DellyShopApp.Views.Pages.Base;using FFImageLoading.Forms;using Plugin.Connectivity;using System;using System.Collections;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Xamarin.Essentials;using Xamarin.Forms;using Xamarin.Forms.Xaml;namespace DellyShopApp.Views.TabbedPages{    [XamlCompilation(XamlCompilationOptions.Compile)]    public partial class HomePage : BasePage    {

        //Order product = new Order();
        public int orgId = Convert.ToInt32(SecureStorage.GetAsync("OrgId").Result);        public int OrgCatId = Convert.ToInt32(SecureStorage.GetAsync("OrgCatId").Result);        public int UserId = Convert.ToInt32(SecureStorage.GetAsync("UserId").Result);        public string userAuth = SecureStorage.GetAsync("Usertype").Result;        List<Category> categories = new List<Category>();        private ProductListModel product;        private const int PageSize = 20;        public HomePage()        {            InitializeComponent();            if (ChechConnectivity())            {               InittHomePage();            }
            //   ShopLogo.Source = SecureStorage.GetAsync("ImgId").Result; //DataService.Instance.ObjOrgData.Image;            
        }        private async Task InittHomePage()        {
            //Busy();
            CategoryList.ItemsSource = await DataService.GetAllParentcategories();
            Tbl_ProductMasterResponse masterProductDTO = new Tbl_ProductMasterResponse();
            //int? OrgUserID = UserId == 0 ? null : (int?)UserId;
            //categories = await DataService.GetAllCategories(orgId);
            var AllProducts = await GetProducts(true);            var productList = AllProducts.GroupBy(p => p.status, p => p, (key, g) => new Tbl_ProductDetailResponse { Status = key, productsDTOs = g.ToList() }).ToList();            masterProductDTO.MainProductDTOs = productList;
            //var AllProducts = await DataService.GetAllProductsByOrganizations(0, OrgUserID, OrgCatId);
            foreach (var prodDetails in masterProductDTO.MainProductDTOs)            {                if (!string.IsNullOrWhiteSpace(prodDetails.Status))                    BindStack(prodDetails.Status, prodDetails.productsDTOs);                else                {
                    //var proList = prodDetails.productsDTOs.Take(100).ToList();
                    //BindFullProductStack(proList);
                }            }        }        public void Busy()        {            uploadIndicator.IsVisible = true;            uploadIndicator.IsRunning = true;            MainLayout.Opacity = 0.7;        }        public void NotBusy()        {            uploadIndicator.IsVisible = false;            uploadIndicator.IsRunning = false;            MainLayout.Opacity = 100;        }        protected override async void OnAppearing()        {            Busy();            if (FirstChildLayout.Children.Count() == 0)            {                Tbl_ProductMasterResponse masterProductDTO = new Tbl_ProductMasterResponse();                var AllProducts = await GetProducts(true);                var productList = AllProducts.GroupBy(p => p.status, p => p, (key, g) => new Tbl_ProductDetailResponse { Status = key, productsDTOs = g.ToList() }).ToList();                masterProductDTO.MainProductDTOs = productList;
                //var AllProducts = await DataService.GetAllProductsByOrganizations(0, OrgUserID, OrgCatId);
                foreach (var prodDetails in masterProductDTO.MainProductDTOs)                {                    if (!string.IsNullOrWhiteSpace(prodDetails.Status))                        BindStack(prodDetails.Status, prodDetails.productsDTOs);                }            }            if (SecondChildLayout.Children.Count() == 0)            {                var AllProducts = await GetProducts(false);                BindFullProductStack(AllProducts);            }            NotBusy();        }        private bool ChechConnectivity()        {            if (CrossConnectivity.Current.IsConnected)            {                return true;            }            else            {                DisplayAlert("Opps!", "Please Check Your Internet Connection", "ok");                return false;            }        }        private async void ProductDetailClick(object sender, EventArgs e)        {            if (!(sender is PancakeView pancake)) return;            if (!(pancake.BindingContext is Tbl_ProductResponse item)) return;            var productDetail = new ProductListModel            {                Id = item.Id,                Title = item.Title,                ProductGUId = item.ProductGUID,                Quantity = item.Quantity,                Description = item.Description,                Brand = item.Brand,                Image = item.Image,                Price = Convert.ToDouble(item.Price),                orgId = item.orgId,                OldPrice = Convert.ToInt32(item.OldPrice),                WishlistedProduct = item.WishlistedProduct,                BrandId = item.BrandId,                CategoryId = item.CategoryId,                SpecificationNames = item.SpecificationNames,                SpecificationId = item.SpecificationId            };            string[] productImageList = item.ProductOtherImages.Split(',');            productDetail.ProductList = productImageList;            await Navigation.PushAsync(new ProductDetail(productDetail));
            //if(item.Quantity  >10 )
        }        private async void ClickCategory(object sender, EventArgs e)        {            if (!(sender is ImageButton imageButton)) return;            if (!(imageButton.BindingContext is Category ca)) return;            await Navigation.PushAsync(new Subcategorypage(ca));        }        async void VireAllTapped(System.Object sender, System.EventArgs e)        {            await Navigation.PushAsync(new BestSellerPage());        }        void DragGestureRecognizer_DropCompleted(System.Object sender, Xamarin.Forms.DropCompletedEventArgs e)        {            BasketLayout.IsVisible = false;        }        async void DropBasketITem(System.Object sender, Xamarin.Forms.DropEventArgs e)        {            if (!DataService.Instance.BasketModel.Contains(product))                DataService.Instance.BasketModel.Add(product);            if (UserId == 0 || UserId == null || userAuth != "Client")            {                await DisplayAlert("Login", "To Continue Shopping Please Sign in", "Ok");                await Navigation.PushAsync(new LoginPage());            }            else            {                if (product.Quantity <= 0)                {                    await DisplayAlert("Opps", "Product Out Of Stock", "Ok");                }                else                {                    Cart cart = new Cart();                    cart.orgId = product.orgId;                    cart.UserId = Convert.ToInt32(UserId);                    cart.proId = product.Id;                    cart.Qty = Convert.ToInt32(ProductCountLabel.Text);                    cart.SpecificationNames = product.SpecificationNames;                    cart.SpecificationId = product.SpecificationId;                    await DataService.AddToCart(cart);                    await DisplayAlert(AppResources.Success, product.Title + " " + AppResources.AddedBakset, AppResources.Okay);
                    //var productId = Convert.ToString(product.Id);
                    //await Xamarin.Essentials.SecureStorage.SetAsync("ProId", productId);
                }            }        }        void DragGestureRecognizer_DragStarting(System.Object sender, Xamarin.Forms.DragStartingEventArgs e)        {            BasketLayout.IsVisible = true;            product = ((sender as Element).BindingContext) as ProductListModel;        }        private async void Click_Banner(System.Object sender, System.EventArgs e)        {            if (!(sender is ContentView content)) return;            if (!(content.BindingContext is Category c)) return;            Category Ca = categories.Where(x => x.Banner != null && x.Banner != "").FirstOrDefault();            await Navigation.PushAsync(new CategoryDetailPage(Ca));        }        private async void TapGestureRecognizer_Tapped(System.Object sender, System.EventArgs e)        {            await Navigation.PushAsync(new MainPage());        }
        private async void SearchBar_TextChanged(object sender, TextChangedEventArgs e)        {            SearchBar searchBar = (SearchBar)sender;            if (searchBar.Text != "")            {                searchResults.IsVisible = true;                searchResults.ItemsSource = await DataService.SearchProducts(orgId, searchBar.Text);            }            else            {                searchResults.IsVisible = false;            }        }        private async void searchResults_ItemSelected(object sender, SelectedItemChangedEventArgs e)        {            var type = sender.GetType();            var evnt = (ProductListModel)searchResults.SelectedItem;            await Navigation.PushAsync(new ProductDetail(evnt));        }        //private void TapGestureRecognizer_Tapped_2(object sender, EventArgs e)        //{        //    Navigation.PushAsync(new TopDeals());        //}        private async void TapGestureRecognizer_BasketTapped(object sender, EventArgs e)        {            await Navigation.PushAsync(new MyCartPage());        }        private void TapGestureRecognizer_WishlistTapped(object sender, EventArgs e)        {            Navigation.PushAsync(new MyFavoritePage());        }        private void TapGestureRecognizer_NotificationTapped(object sender, EventArgs e)        {            Navigation.PushAsync(new NotificationDetailPage());        }        public void BindStack(string label, List<Tbl_ProductResponse> productResponses)        {            var dynamicResourceBold = new Xamarin.Forms.Internals.DynamicResource("VerdanaProBold");            var dynamicResourceRegular = new Xamarin.Forms.Internals.DynamicResource("VerdanaProRegular");            StackLayout stackLayout = new StackLayout();            stackLayout.Orientation = StackOrientation.Horizontal;            Label stacklabel = new Label();            stacklabel.Margin = new Thickness(0, 10, 0, 0);            stacklabel.Padding = new Thickness(5, 5, 0, 0);            stacklabel.FontAttributes = FontAttributes.Bold;            stacklabel.FontFamily = dynamicResourceBold.Key;            stacklabel.FontSize = 22;            stacklabel.HorizontalOptions = LayoutOptions.StartAndExpand;            stacklabel.Text = label;            stacklabel.TextColor = Color.Black;            stacklabel.VerticalOptions = LayoutOptions.Start;            stackLayout.Children.Add(stacklabel);            ScrollView statusScrollView = new ScrollView();            statusScrollView.HorizontalScrollBarVisibility = ScrollBarVisibility.Never;            statusScrollView.Orientation = ScrollOrientation.Horizontal;            RepeaterView statusRepeaterView = new RepeaterView();            statusRepeaterView.Orientation = StackOrientation.Horizontal;            statusRepeaterView.Spacing = -5;            var dataTemplate = new DataTemplate(() =>            {
                ViewCell vc = new ViewCell();
                Image cacheImage = new Image
                {
                    Aspect = Aspect.AspectFit,
                    HeightRequest = 150,
                    Margin = 5,
                    VerticalOptions = LayoutOptions.Start
                };
                cacheImage.SetBinding(Image.SourceProperty, "Image");
                Label stacklabelChild = new Label
                {
                    FontFamily = dynamicResourceRegular.Key,
                    LineBreakMode = LineBreakMode.TailTruncation,
                    TextColor = Color.Black,
                    VerticalOptions = LayoutOptions.Start
                };
                stacklabelChild.SetBinding(Label.TextProperty, "Title");



                Label childLabel = new Label
                {
                    FontFamily = dynamicResourceBold.Key,
                    FontSize = 10,
                    HorizontalOptions = LayoutOptions.EndAndExpand,
                    TextColor = Color.Gray,
                    WidthRequest = 80,
                    TextDecorations = TextDecorations.Strikethrough,
                    VerticalOptions = LayoutOptions.CenterAndExpand
                };
                childLabel.SetBinding(Label.TextProperty, "OldPrice", stringFormat: $"{"₹"}{{0}}"); ;
                Label childLabel2 = new Label
                {
                    FontFamily = dynamicResourceBold.Key,
                    FontSize = 13,
                    HorizontalOptions = LayoutOptions.End,
                    TextColor = Color.Black,
                    WidthRequest = 80,
                    VerticalOptions = LayoutOptions.Center
                };
                childLabel2.SetBinding(Label.TextProperty, "Price", stringFormat: $"{"₹"}{{0}}");

                StackLayout childStackLayout = new StackLayout
                {
                    Orientation = StackOrientation.Horizontal,
                    VerticalOptions = LayoutOptions.EndAndExpand,
                   
                };
                childStackLayout.Children.Add(childLabel);
                childStackLayout.Children.Add(childLabel2);

                StackLayout pancakeChildLayout = new StackLayout();
                pancakeChildLayout.Children.Add(cacheImage);
                pancakeChildLayout.Children.Add(stacklabelChild);
                pancakeChildLayout.Children.Add(childStackLayout);

                                             PancakeView dataTemplatePancakeView = new PancakeView();                dataTemplatePancakeView.Margin = 5;                dataTemplatePancakeView.Padding = 5;                dataTemplatePancakeView.BackgroundColor = Color.White;                dataTemplatePancakeView.CornerRadius = 8;                dataTemplatePancakeView.Elevation = 3;                dataTemplatePancakeView.HasShadow = true;                dataTemplatePancakeView.HeightRequest = 250;                dataTemplatePancakeView.HorizontalOptions = LayoutOptions.StartAndExpand;                dataTemplatePancakeView.VerticalOptions = LayoutOptions.StartAndExpand;                dataTemplatePancakeView.WidthRequest = 140;                dataTemplatePancakeView.GestureRecognizers.Add(new TapGestureRecognizer                {                    Command = new Command(() => ProductDetailClick(dataTemplatePancakeView, null)),                });                dataTemplatePancakeView.Content = pancakeChildLayout;
               
                //  dataTemplatePancakeView.ChildAdded(pancakeChildLayout); 
                vc.View = dataTemplatePancakeView;                               return vc;            });            statusRepeaterView.ItemTemplate = dataTemplate;            statusRepeaterView.ItemsSource = productResponses.Take(5).ToList();            statusRepeaterView.BindingContext = productResponses.ToList();            statusScrollView.Content = statusRepeaterView;            FirstChildLayout.Children.Add(stackLayout);            FirstChildLayout.Children.Add(statusScrollView);        }        public void BindFullProductStack(List<Tbl_ProductResponse> productResponses)        {            var dynamicResourceBold = new Xamarin.Forms.Internals.DynamicResource("VerdanaProBold");            var dynamicResourceRegular = new Xamarin.Forms.Internals.DynamicResource("VerdanaProRegular");            StackLayout stackLayout = new StackLayout();            stackLayout.Orientation = StackOrientation.Horizontal;            Label stacklabel = new Label();            stacklabel.Margin = new Thickness(0, 10, 0, 0);            stacklabel.Padding = new Thickness(5, 5, 0, 0);            stacklabel.FontAttributes = FontAttributes.Bold;            stacklabel.FontFamily = dynamicResourceBold.Key;            stacklabel.FontSize = 22;            stacklabel.HorizontalOptions = LayoutOptions.StartAndExpand;            stacklabel.Text = "Shooppy Xplore";            stacklabel.TextColor = Color.Black;            stacklabel.VerticalOptions = LayoutOptions.Start;            stackLayout.Children.Add(stacklabel);            SecondChildLayout.Children.Add(stackLayout);            ListView productListView = new ListView();            FlowListView flowListView = new FlowListView();            flowListView.FlowColumnCount = 2;            flowListView.FlowColumnExpand = FlowColumnExpand.None;            flowListView.HasUnevenRows = false;            flowListView.RowHeight = 280;            flowListView.SeparatorVisibility = SeparatorVisibility.None;            flowListView.VerticalOptions = LayoutOptions.StartAndExpand;            flowListView.VerticalScrollBarVisibility = ScrollBarVisibility.Never;            flowListView.FlowIsLoadingInfinite = true;            flowListView.FlowIsLoadingInfiniteEnabled = true;            var dataTemplate = new DataTemplate(() =>            {                Image cacheImage = new Image                {                    Aspect = Aspect.AspectFit,                    HeightRequest = 150,                    Margin = 5,                    VerticalOptions = LayoutOptions.Start                };                cacheImage.SetBinding(Image.SourceProperty, "Image");                Label stacklabelChild = new Label                {                    FontFamily = dynamicResourceRegular.Key,                    LineBreakMode = LineBreakMode.TailTruncation,                    TextColor = Color.Black,                    VerticalOptions = LayoutOptions.Start                };                stacklabelChild.SetBinding(Label.TextProperty, "Title");                Label childLabel = new Label                {                    FontFamily = dynamicResourceBold.Key,                    FontSize = 10,                    HorizontalOptions = LayoutOptions.EndAndExpand,                    TextColor = Color.Gray,                    WidthRequest = 80,                    TextDecorations = TextDecorations.Strikethrough,                    VerticalOptions = LayoutOptions.CenterAndExpand                };                childLabel.SetBinding(Label.TextProperty, "OldPrice",stringFormat: $"{"₹"}{{0}}");                Label childLabel2 = new Label                {                    FontFamily = dynamicResourceBold.Key,                    FontSize = 13,                    HorizontalOptions = LayoutOptions.End,                    TextColor = Color.Black,                    WidthRequest = 80,                    VerticalOptions = LayoutOptions.Center                };                childLabel2.SetBinding(Label.TextProperty, "Price", stringFormat: $"{"₹"}{{0}}");                StackLayout childStackLayout = new StackLayout                {                    Orientation = StackOrientation.Horizontal,                    VerticalOptions = LayoutOptions.EndAndExpand                };                childStackLayout.Children.Add(childLabel);                childStackLayout.Children.Add(childLabel2);                StackLayout pancakeChildLayout = new StackLayout();                pancakeChildLayout.Children.Add(cacheImage);                pancakeChildLayout.Children.Add(stacklabelChild);                pancakeChildLayout.Children.Add(childStackLayout);                PancakeView dataTemplatePancakeView = new PancakeView();                dataTemplatePancakeView.Margin = 5;                dataTemplatePancakeView.Padding = 5;                dataTemplatePancakeView.BackgroundColor = Color.White;                dataTemplatePancakeView.CornerRadius = 8;                dataTemplatePancakeView.Elevation = 2;                dataTemplatePancakeView.HasShadow = true;                dataTemplatePancakeView.HeightRequest = 250;                dataTemplatePancakeView.HorizontalOptions = LayoutOptions.FillAndExpand;                dataTemplatePancakeView.VerticalOptions = LayoutOptions.StartAndExpand;                dataTemplatePancakeView.WidthRequest = 140;                dataTemplatePancakeView.GestureRecognizers.Add(new TapGestureRecognizer                {                    Command = new Command(() => ProductDetailClick(dataTemplatePancakeView, null)),                });                dataTemplatePancakeView.Content = pancakeChildLayout;

                //  dataTemplatePancakeView.ChildAdded(pancakeChildLayout); 
                return dataTemplatePancakeView;            });            flowListView.FlowColumnTemplate = dataTemplate;            flowListView.FlowItemsSource = productResponses;            SecondChildLayout.Children.Add(flowListView);        }        public async Task<List<Tbl_ProductResponse>> GetProducts(bool IsHorizontal = true, int pageIndex = 0, int pageSize = 20)        {            return await App.SQLiteDb.GetItemsAsync(IsHorizontal, pageIndex, pageSize);        }    }}